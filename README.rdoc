Objectives

  -Deliver messages when they are relevant, according to user preferences and RESTfully provided contexts.
  -Coordinate message delivery across devices to avoid redundancy.

Message delivery behavior is based on rules that act on context:

  -Sender of message
  -Time received
  -Traditional text filters
  -Originating service (e.g. Twitter, Gmail, Reddit, Facebook, Google Voice, XMPP/Jabber)

Optional third-party services will use a RESTful API to supply additional context. Hermes could consider the following when determining how to present messages:
  
  -"Is user wearing Google Glass?"
  -"Where is user? Is he in one of the zones he defined?"
  -"Where is user located relative to others? Is he face-to-face with anyone? Is his microphone indicating an ongoing conversation we should avoid interrupting?"
  -"What browser tab is user active in? Is he studying and not to be distracted by low-priority messages?"
  -"Is user currently riding a bicycle?"
  -"Is user walking?"
  -"What events are occurring right now on user's calendar?"
  -"Is user asleep?"

Arbitrary contexts may be added to messages by the sender, and the recipiant may choose to take those attributes into consideration in rules as well:
  
  -Sender's location
  -Priority or urgency
  -Privacy (so clients can avoid displaying messages where others might see, or require a password to open)

These contexts will be made available to third-party context services for maximum utility.

A sender could conceivably include credentials to access their location for a limited time, so that a third-party context service could see the current location of the sender when opening the message.

Syncs messages' read-unread status across multiple clients, such as:

  -Web client
  -Browser extension (thus on any desktop/notebook)
  -Google Glass
  -Android notification area (phone and tablet synced)
  -iOS
  -TV
  -Pebble

Synchronization will mitigate today's problem of separately-dismissed notices in Android notification areas, for example.

Clients such as televisions or cars could easily be made to handle messages for multiple users simultaneously

Rules generate one or more presentations for the messages, typically one of three archetypes:

  -Blip: momentary "pop-up" with variable display length. Optional explicit-dismissal requirement.
  -Inbox item: user defines an unlimited number of inboxes, which require explicit dismissal of messages. (work, todo, podcasts, video)
  -Stream: like an inbox, but without explicit dismissal. Useful for combining low-priority leisure feeds such as Reddit, Google+, Facebook. User should not see the same item twice. Items could be made to expire eventually.

On the backend, these are represented by simple Presentation and Inbox objects, differentiated by Inbox attributes that define behavior.

Clients may offer the user the chance to perform Actions in response to Presentations:

  -Reply (and other traditional actions)
  -Send to inbox for later action (yields menu of inboxes)
  -Share with Person (menu of People and their contact methods)
  -Share with Service (menu of social network services)
  -Third-party RESTful actions user has opted-in to

Presentations may carry with them instructions to the client to display certain response actions. ("Make this a to-do item". "Share this on all social networks".)

Example use cases:

  -Show Glass popups of overnight work email when entering work area.
  -While at work, show a Glass popup for each new email along with the normal work inbox presentation.
  -When I'm driving (third party context), add to all incoming texts a quick-reply button to send back a Google Maps ETA to the sender. (third-party action)
  -While watching a sports event, deliver tweets with the relevant hashtag in Glass.
  -Combine Reddit, Google+, Facebook into one stream the user can scroll through at will.

Unorganized other requirements:

  -The user should be encouraged to subvert the Message object as a todo-item. This should not feel hacky, as when one sends one's self an email as a reminder.
  -Rules can also be connected into logic structures with AND/OR metarules, which are tucked away from novice users but available for advanced needs.
  -Clients are encouraged to provide a shortcut for each message that quickly displays all rules affecting that message, so that users may have awareness of the logic structures they have built and easily change them
  -Intelligent defaults are important. A few typical inboxes exist by default, and as services are added to the user's Hermes logic they behave similarly to their standalone counterparts.